---
description: Authentication System Implementation
globs: 
alwaysApply: false
---
# Authentication System Implementation Rule

## Context
- The application uses a centralized authentication system
- Authentication state is managed through AuthContext and AuthService
- LocalStorage is used to persist authentication state

## Requirements
### MUST follow these authentication principles:

1. **Global Authentication State**
   - ALWAYS use the AuthContext for authentication state
   - NEVER create separate authentication logic outside this system
   - ALWAYS access user data through useAuth() hook

2. **Minimize API Requests**
   - DO use the synchronous isAuthenticated() method for simple auth checks
   - DO rely on cached user data when available
   - NEVER make redundant /auth/user/ API calls

3. **Protected Routes**
   - ALWAYS protect private routes with ProtectedRoute component
   - ALWAYS redirect unauthenticated users to login page
   - ALWAYS handle loading states during authentication checks

4. **Standard Auth Flow**
   - ALWAYS use login() and logout() methods from AuthContext
   - ALWAYS handle success/failure state from these methods
   - NEVER directly manipulate localStorage auth values

5. **Security Best Practices**
   - NEVER store sensitive tokens in localStorage
   - ALWAYS validate permissions on both client and server
   - NEVER assume client-side auth state is sufficient for sensitive operations

## Examples

### Correct: Using the Auth Context
```tsx
import { useAuth } from '../context/AuthContext';

const MyComponent = () => {
  const { user, loading, isAuthenticated } = useAuth();
  
  if (loading) {
    return <LoadingSpinner />;
  }
  
  return isAuthenticated() ? <AuthenticatedView /> : <GuestView />;
};
```

### Incorrect: Direct API Calls or LocalStorage Access
```tsx
// WRONG - Do not do this
import apiService from '../services/apiService';

const MyComponent = () => {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    // Direct API call bypassing the auth system
    apiService.get('auth/user/')
      .then(user => setUser(user))
      .catch(() => setUser(null));
  }, []);
  
  // Direct localStorage access
  const isLoggedIn = !!localStorage.getItem('czesci_auth_user');
  
  return isLoggedIn ? <AuthenticatedView /> : <GuestView />;
};
```

### Correct: Implementing a Protected Component
```tsx
const ProtectedComponent = () => {
  const { isAuthenticated, loading } = useAuth();
  
  if (loading) {
    return <LoadingSpinner />;
  }
  
  if (!isAuthenticated()) {
    return <Navigate to="/login" />;
  }
  
  return <YourComponent />;
};
```

## Documentation
For detailed information on the authentication system, refer to:
- [AUTH_SYSTEM.md](../docs/AUTH_SYSTEM.md) - Full authentication documentation
- [AuthContext.tsx](../src/context/AuthContext.tsx) - Context implementation
- [authService.ts](../src/services/authService.ts) - Auth service implementation